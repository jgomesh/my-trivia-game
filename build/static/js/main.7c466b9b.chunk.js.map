{"version":3,"sources":["assets/images/clock.svg","assets/images/clock-danger.svg","assets/images/sad-feedback.svg","assets/images/happy-feedback.svg","assets/images/trophy.svg","services/fetchToken.js","utils/isEmailValid.js","redux/actions/actionTypes.js","components/Button/index.js","pages/Login/index.js","redux/actions/actions.js","services/fetchGameQuestions.js","utils/sortQuestions.js","components/Question/index.js","components/Header/index.js","utils/clearTimer.js","pages/Game/index.js","pages/Settings/index.js","pages/Feedback/index.js","pages/Ranking/index.js","App.js","redux/reducers/playerReducer.js","redux/reducers/rootReducer.js","redux/store/store.js","index.js"],"names":["module","exports","fetchToken","fetch","then","response","json","data","localStorage","setItem","token","catch","err","console","log","message","isEmailValid","email","test","Button","this","props","title","onClick","className","disabled","testId","type","data-testid","Component","defaultProps","Login","state","name","gravatarEmail","handleChange","target","value","setState","isFormValid","handleUserLogin","a","history","dispatchUserInfo","resetUserPoints","push","goToSettings","autoComplete","placeholder","id","onChange","React","connect","dispatch","info","payload","sendUserInfo","fetchGameQuestions","userToken","getItem","error","sortQuestions","question","sortedAnswers","incorrect_answers","correct_answer","sort","Math","random","Question","toggleQuestionClass","answered","answer","includes","toggleTestId","index","calculatePoints","timer","score","easy","medium","hard","difficulty","calculateAssertions","assertions","calculateScore","points","p","document","createElement","innerHTML","handleClick","isDisabled","answers","category","createMarkup","map","key","player","Header","userEmailToHash","md5","toString","alt","src","clearTimer","intervalId","clearInterval","Game","questions","timerCounter","setInterval","prevState","increment","ranking","JSON","parse","stringify","setPoints","sendGameInfo","handleAnswerClick","results","length","removeItem","resultsSorted","clockDanger","clock","sendUserGameInfo","Settings","Feedback","redirect","path","toggleFeedbackText","sadFeedback","happyFeedback","Ranking","sortedRanking","b","trophy","user","generateProfilePicUrl","App","exact","component","INITIAL_STATE","action","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","window","Cypress","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.7c466b9b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/clock.1c1d5a05.svg\";","module.exports = __webpack_public_path__ + \"static/media/clock-danger.04a8e1fd.svg\";","module.exports = __webpack_public_path__ + \"static/media/sad-feedback.35de1fda.svg\";","module.exports = __webpack_public_path__ + \"static/media/happy-feedback.61ae0a25.svg\";","module.exports = __webpack_public_path__ + \"static/media/trophy.21bade0f.svg\";","const fetchToken = () => fetch('https://opentdb.com/api_token.php?command=request')\n  .then((response) => response.json())\n  .then((data) => localStorage.setItem('token', data.token))\n  .catch((err) => console.log(err.message));\n\nexport default fetchToken;\n","export default function isEmailValid(email) {\n  const regex = /\\S+@\\S+com/;\n  return regex.test(email);\n}\n","export const SEND_USER_INFO = 'SEND_USER_INFO';\nexport const SEND_USER_GAME_INFO = 'SEND_USER_GAME_INFO';\nexport const RESET_USER_POINTS = 'RESET_USER_POINTS';\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './Button.scss';\n\nclass Button extends Component {\n  render() {\n    const {\n      title,\n      onClick,\n      className,\n      disabled,\n      testId,\n    } = this.props;\n    return (\n      <button\n        type=\"button\"\n        onClick={ onClick }\n        className={ className }\n        disabled={ disabled }\n        data-testid={ testId }\n      >\n        { title }\n      </button>\n    );\n  }\n}\n\nexport default Button;\n\nButton.propTypes = {\n  title: PropTypes.string.isRequired,\n  onClick: PropTypes.func,\n  className: PropTypes.string,\n  disabled: PropTypes.bool,\n  testId: PropTypes.string,\n};\n\nButton.defaultProps = {\n  onClick: () => {},\n  className: '',\n  disabled: false,\n  testId: '',\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport fetchToken from '../../services/fetchToken';\nimport isEmailValid from '../../utils/isEmailValid';\nimport { sendUserInfo, resetPoints } from '../../redux/actions/actions';\nimport Button from '../../components/Button';\nimport './Login.scss';\n\nclass Login extends React.Component {\n  state = {\n    name: '',\n    gravatarEmail: '',\n  }\n\n  handleChange = ({ target }) => {\n    const { value, name } = target;\n    this.setState({ [name]: value });\n  }\n\n  isFormValid = () => {\n    const { name, gravatarEmail } = this.state;\n    return (name && isEmailValid(gravatarEmail));\n  }\n\n  handleUserLogin = async () => {\n    const { history, dispatchUserInfo, resetUserPoints } = this.props;\n    resetUserPoints();\n    dispatchUserInfo(this.state);\n    await fetchToken();\n    history.push('/game');\n  }\n\n  goToSettings = () => {\n    const { history } = this.props;\n    history.push('/settings');\n  }\n\n  render() {\n    const { name, gravatarEmail } = this.state;\n    return (\n      <main className=\"login__container\">\n        <form className=\"login__container__form\" autoComplete=\"off\">\n          <div className=\"login__container__form__logo\" />\n          <input\n            className=\"login__container__form__input\"\n            placeholder=\"Enter your name...\"\n            type=\"text\"\n            data-testid=\"input-player-name\"\n            value={ name }\n            name=\"name\"\n            id=\"name\"\n            onChange={ this.handleChange }\n          />\n\n          <input\n            className=\"login__container__form__input\"\n            type=\"email\"\n            name=\"gravatarEmail\"\n            id=\"gravatarEmail\"\n            placeholder=\"Enter your e-mail...\"\n            value={ gravatarEmail }\n            onChange={ this.handleChange }\n            data-testid=\"input-gravatar-email\"\n          />\n\n          <Button\n            title=\"PLAY\"\n            className=\"login__container__form__btn\"\n            type=\"button\"\n            testId=\"btn-play\"\n            onClick={ this.handleUserLogin }\n            disabled={ !this.isFormValid() }\n          />\n          <Button\n            title=\"Settings\"\n            className=\"settings_btn\"\n            type=\"button\"\n            testId=\"btn-settings\"\n            onClick={ this.goToSettings }\n          />\n        </form>\n      </main>\n    );\n  }\n}\n\nLogin.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n  dispatchUserInfo: PropTypes.func.isRequired,\n  resetUserPoints: PropTypes.func.isRequired,\n};\nconst mapDispatchToProps = (dispatch) => ({\n  dispatchUserInfo: (info) => dispatch(sendUserInfo(info)),\n  resetUserPoints: () => dispatch(resetPoints()),\n});\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import { SEND_USER_INFO, SEND_USER_GAME_INFO, RESET_USER_POINTS } from './actionTypes';\n\nexport const sendUserInfo = (info) => ({\n  type: SEND_USER_INFO,\n  payload: info,\n});\n\nexport const sendUserGameInfo = (score, assertions) => ({\n  type: SEND_USER_GAME_INFO,\n  payload: {\n    score,\n    assertions,\n  },\n});\n\nexport const resetPoints = () => ({\n  type: RESET_USER_POINTS,\n});\n","function fetchGameQuestions() {\n  const baseQuestionsApiUrl = 'https://opentdb.com/api.php?amount=5&token=';\n  const userToken = localStorage.getItem('token');\n\n  return fetch(`${baseQuestionsApiUrl}${userToken}`)\n    .then((response) => response.json())\n    .then((data) => data)\n    .catch((error) => console.error(error));\n}\n\nexport default fetchGameQuestions;\n","function sortQuestions(question) {\n  const shuffle = 0.5;\n\n  const sortedAnswers = [...question?.incorrect_answers, question?.correct_answer]\n    .sort(() => shuffle - Math.random());\n\n  return ({\n    ...question,\n    sortedAnswers,\n  });\n}\n\nexport default sortQuestions;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Button from '../Button';\nimport './Question.scss';\n\nclass Question extends Component {\n  toggleQuestionClass = (answered, question, answer) => {\n    if (!answered) {\n      return '';\n    }\n\n    if (answered && question.includes(answer)) {\n      return 'wrong';\n    }\n\n    return 'correct';\n  }\n\n  toggleTestId = (question, answer, index) => {\n    if (question.incorrect_answers.includes(answer)) {\n      return `wrong-answer-${index}`;\n    }\n\n    return 'correct-answer';\n  }\n\n  calculatePoints = (answer, question) => {\n    const { timer, score } = this.props;\n    const minPoints = 10;\n\n    const pointsMeasure = {\n      easy: 1,\n      medium: 2,\n      hard: 3,\n    };\n\n    if (answer === question.correct_answer) {\n      const points = minPoints + (timer * pointsMeasure[question.difficulty]);\n      return score + points;\n    }\n\n    return score;\n  }\n\n  calculateAssertions = (answer, question) => {\n    const { assertions } = this.props;\n\n    if (answer === question.correct_answer) {\n      return assertions + 1;\n    }\n\n    return assertions;\n  }\n\n  calculateScore = (answer, question) => {\n    const points = this.calculatePoints(answer, question);\n    const assertions = this.calculateAssertions(answer, question);\n\n    return { points, assertions };\n  }\n\n  createMarkup(question) {\n    const p = document.createElement('textarea');\n    p.innerHTML = question;\n    return p.value;\n  }\n\n  render() {\n    const { question, answered, handleClick, isDisabled } = this.props;\n\n    const answers = question.sortedAnswers;\n\n    return (\n      <div className=\"question__container\">\n\n        <p className=\"question__container__category\" data-testid=\"question-category\">\n          {question.category}\n        </p>\n\n        <p\n          data-testid=\"question-text\"\n          className=\"question__container__questionText\"\n        >\n          { this.createMarkup(question.question) }\n        </p>\n\n        <div\n          className=\"question__container__buttons__container\"\n          data-testid=\"answer-options\"\n        >\n          {answers.map((answer, index) => (\n            <Button\n              key={ answer }\n              title={ this.createMarkup(answer) }\n              disabled={ isDisabled }\n              data-testid={ this.toggleTestId(question, answer, index) }\n              className={\n                this.toggleQuestionClass(answered, question.incorrect_answers, answer)\n              }\n              onClick={ () => handleClick(this.calculateScore(answer, question)) }\n            />\n          ))}\n        </div>\n\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  score: state.player.score,\n  assertions: state.player.assertions,\n});\n\nexport default connect(mapStateToProps)(Question);\n\nQuestion.propTypes = {\n  question: PropTypes.shape({\n    category: PropTypes.string.isRequired,\n    type: PropTypes.string.isRequired,\n    difficulty: PropTypes.string.isRequired,\n    question: PropTypes.string.isRequired,\n    correct_answer: PropTypes.string.isRequired,\n    incorrect_answers: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\n    sortedAnswers: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\n  }).isRequired,\n  answered: PropTypes.bool.isRequired,\n  isDisabled: PropTypes.bool.isRequired,\n  handleClick: PropTypes.func.isRequired,\n  score: PropTypes.number.isRequired,\n  timer: PropTypes.number.isRequired,\n  assertions: PropTypes.number.isRequired,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport md5 from 'crypto-js/md5';\nimport { connect } from 'react-redux';\nimport './Header.scss';\n\nclass Header extends Component {\n  render() {\n    const { name, gravatarEmail, score } = this.props;\n\n    const gravatarBaseUrl = 'https://www.gravatar.com/avatar/';\n    const userEmailToHash = md5(gravatarEmail).toString();\n\n    return (\n      <header className=\"header__container\">\n        <aside className=\"header__container__aside\">\n          <img\n            data-testid=\"header-profile-picture\"\n            alt=\"profile\"\n            src={ `${gravatarBaseUrl}${userEmailToHash}` }\n          />\n          <div className=\"header__container__aside__playerName\">\n            <span data-testid=\"header-player-name\">{ name }</span>\n          </div>\n          <div className=\"header__container__aside__playerScore\">\n            <p>Player score:</p>\n            <span data-testid=\"header-score\">{ score }</span>\n          </div>\n        </aside>\n      </header>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  ...state.player,\n});\n\nHeader.propTypes = {\n  gravatarEmail: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n};\n\nexport default connect(mapStateToProps, null)(Header);\n","function clearTimer(intervalId) {\n  clearInterval(intervalId);\n}\n\nexport default { clearTimer };\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport fetchGameQuestions from '../../services/fetchGameQuestions';\nimport sortQuestions from '../../utils/sortQuestions';\nimport Question from '../../components/Question';\nimport Header from '../../components/Header';\nimport Button from '../../components/Button';\nimport { sendUserGameInfo } from '../../redux/actions/actions';\nimport clearTimer from '../../utils/clearTimer';\nimport clock from '../../assets/images/clock.svg';\nimport clockDanger from '../../assets/images/clock-danger.svg';\nimport './Game.scss';\n\nclass Game extends Component {\n  state = {\n    questions: [],\n    index: 0,\n    answered: false,\n    timer: 30,\n  }\n\n  async componentDidMount() {\n    const { history } = this.props;\n\n    const { results } = await fetchGameQuestions();\n\n    if (!results.length) {\n      localStorage.removeItem('token');\n      history.push('/');\n    }\n\n    const resultsSorted = results.map(sortQuestions);\n\n    this.setState((prevState) => ({\n      ...prevState,\n      questions: [...resultsSorted],\n    }));\n\n    this.timerCounter();\n  }\n\n  componentWillUnmount() {\n    const { intervalId } = this.state;\n    clearTimer.clearTimer(intervalId);\n  }\n\n  timerCounter = () => {\n    const delayInMiliseconds = 1000;\n\n    const intervalId = setInterval(() => {\n      const { timer } = this.state;\n      if (timer === 0) {\n        this.setState({ answered: true });\n        return clearTimer.clearTimer(intervalId);\n      }\n\n      this.setState((prevState) => ({\n        ...prevState,\n        timer: prevState.timer - 1,\n        intervalId,\n      }));\n    }, delayInMiliseconds);\n  }\n\n  increment = () => {\n    const maxLength = 4;\n\n    const {\n      history,\n      player,\n    } = this.props;\n\n    const { intervalId, index } = this.state;\n\n    clearTimer.clearTimer(intervalId);\n\n    this.setState((prevState) => ({\n      ...prevState,\n      index: prevState.index < maxLength && prevState.index + 1,\n      answered: false,\n      timer: 30,\n    }), () => this.timerCounter());\n\n    if (index === maxLength) {\n      history.push('/feedback');\n\n      if (!localStorage.getItem('ranking')) {\n        localStorage.setItem('ranking', JSON.stringify([player]));\n      } else {\n        const ranking = JSON.parse(localStorage.getItem('ranking'));\n        localStorage.setItem('ranking', JSON.stringify([...ranking, player]));\n      }\n    }\n  };\n\n  setPoints = (points, assertions) => {\n    const { sendGameInfo } = this.props;\n    sendGameInfo(points, assertions);\n  }\n\n  handleAnswerClick = ({ points, assertions }) => {\n    this.setState({\n      answered: true,\n    });\n\n    this.setPoints(points, assertions);\n  }\n\n  render() {\n    const { index, questions, answered, timer } = this.state;\n    const dangerTime = 10;\n\n    return (\n      <div className=\"game__container\">\n        <Header />\n\n        <main className=\"game__container__question__container\">\n\n          <div className=\"game__container__timer__container\">\n            <img src={ timer <= dangerTime ? clockDanger : clock } alt=\"clock icon\" />\n            <h1 className={ timer <= dangerTime ? 'danger' : '' }>{ timer }</h1>\n          </div>\n\n          { !!questions.length && (\n            <Question\n              question={ questions[index] }\n              answered={ answered }\n              handleClick={ this.handleAnswerClick }\n              isDisabled={ !timer || answered }\n              timer={ timer }\n            />\n          )}\n\n          {\n            answered && (\n              <Button\n                className=\"game__container__nextAnswerButton\"\n                type=\"button\"\n                title=\"Next\"\n                testId=\"btn-next\"\n                onClick={ this.increment }\n              />\n            )\n          }\n        </main>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  sendGameInfo: (score, assertions) => dispatch(sendUserGameInfo(score, assertions)),\n});\n\nconst mapStateToProps = (state) => ({\n  ...state,\n});\n\nGame.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n  player: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    score: PropTypes.number.isRequired,\n    assertions: PropTypes.number.isRequired,\n    gravatarEmail: PropTypes.string.isRequired,\n  }).isRequired,\n  sendGameInfo: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n","import React, { Component } from 'react';\n\nclass Settings extends Component {\n  render() {\n    return (\n      <h1 data-testid=\"settings-title\">Settings</h1>\n    );\n  }\n}\n\nexport default Settings;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Header from '../../components/Header';\nimport Button from '../../components/Button';\nimport './Feedback.scss';\nimport sadFeedback from '../../assets/images/sad-feedback.svg';\nimport happyFeedback from '../../assets/images/happy-feedback.svg';\n\nclass Feedback extends Component {\n  redirect = (path) => {\n    const { history } = this.props;\n    history.push(path);\n  }\n\n  toggleFeedbackText(assertions) {\n    const minAssertionsQuantity = 3;\n\n    if (assertions < minAssertionsQuantity) {\n      return 'Could be better...';\n    }\n\n    return 'Well Done!';\n  }\n\n  render() {\n    const { assertions, score } = this.props;\n    const minAssertions = 3;\n    return (\n      <div className=\"feedback__container\">\n        <Header />\n        <main className=\"feedback__container__content\">\n          <div className=\"feedback__container__content__header\">\n            <h1\n              data-testid=\"feedback-text\"\n              className=\"feedback__container__content__feedbackText\"\n            >\n              { this.toggleFeedbackText(assertions) }\n            </h1>\n            <img\n              src={ assertions < minAssertions ? sadFeedback : happyFeedback }\n              alt={ assertions < minAssertions ? 'sad neon emote' : 'happy neon emote' }\n            />\n          </div>\n          <p\n            data-testid=\"feedback-total-question\"\n            className=\"feedback__container__assertions\"\n          >\n            { `Right answers: ${assertions}` }\n          </p>\n          <p\n            data-testid=\"feedback-total-score\"\n            className=\"feedback__container__score\"\n          >\n            { `Final score: ${score}` }\n          </p>\n          <div className=\"feedback__container__content__buttonsContainer\">\n            <Button\n              type=\"button\"\n              title=\"Play Again\"\n              testId=\"btn-play-again\"\n              onClick={ () => this.redirect('/') }\n            />\n            <Button\n              type=\"button\"\n              title=\"Ranking\"\n              testId=\"btn-ranking\"\n              onClick={ () => this.redirect('/ranking') }\n            />\n          </div>\n        </main>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  assertions: state.player.assertions,\n  score: state.player.score,\n});\n\nFeedback.propTypes = {\n  assertions: PropTypes.number.isRequired,\n  score: PropTypes.number.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n};\n\nexport default connect(mapStateToProps)(Feedback);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport md5 from 'crypto-js/md5';\nimport Button from '../../components/Button';\nimport trophy from '../../assets/images/trophy.svg';\nimport './Ranking.scss';\n\nclass Ranking extends Component {\n  state = {\n    ranking: [],\n  }\n\n  componentDidMount() {\n    const ranking = JSON.parse(localStorage.getItem('ranking'));\n    const sortedRanking = ranking?.sort((a, b) => (b.score - a.score));\n    this.setState({ ranking: sortedRanking });\n  }\n\n  redirect = (path) => {\n    const { history } = this.props;\n    history.push(path);\n  }\n\n  generateProfilePicUrl(gravatarEmail) {\n    const gravatarBaseUrl = 'https://www.gravatar.com/avatar/';\n    const userEmailToHash = md5(gravatarEmail).toString();\n    return gravatarBaseUrl + userEmailToHash;\n  }\n\n  render() {\n    const { ranking } = this.state;\n    return (\n      <div className=\"ranking__container\">\n        <div className=\"ranking__container__title__container\">\n          <h1 data-testid=\"ranking-title\">Ranking</h1>\n          <img src={ trophy } alt=\"trophy\" />\n        </div>\n        <div className=\"ranking__container__content__container\">\n          {!!ranking?.length && (\n            ranking?.map((user, index) => (\n              <div\n                className=\"ranking__container__content__container__user__info\"\n                key={ user.name + user.score }\n              >\n                <div className=\"profile-pic\">\n                  <img\n                    src={ this.generateProfilePicUrl(user.gravatarEmail) }\n                    alt={ `${user.name} gravatar` }\n                  />\n                </div>\n                <div className=\"text-info\">\n                  <p data-testid={ `player-name-${index}` }>{ user.name }</p>\n                  <p\n                    data-testid={ `player-score-${index}` }\n                  >\n                    { `Score: ${user.score}` }\n                  </p>\n                </div>\n              </div>\n            ))\n          )}\n        </div>\n        <Button\n          title=\"Play again\"\n          type=\"button\"\n          data-testid=\"btn-go-home\"\n          onClick={ () => this.redirect('/') }\n        />\n      </div>\n    );\n  }\n}\n\nRanking.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n};\n\nexport default Ranking;\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Game from './pages/Game';\nimport Settings from './pages/Settings';\nimport Feedback from './pages/Feedback';\nimport Ranking from './pages/Ranking';\n\nexport default function App() {\n  return (\n    <Switch>\n      <Route exact path=\"/my-trivia-game\" component={ Login } />\n      <Route path=\"/game\" component={ Game } />\n      <Route path=\"/settings\" component={ Settings } />\n      <Route path=\"/feedback\" component={ Feedback } />\n      <Route path=\"/ranking\" component={ Ranking } />\n    </Switch>\n  );\n}\n","import {\n  SEND_USER_GAME_INFO,\n  SEND_USER_INFO,\n  RESET_USER_POINTS,\n} from '../actions/actionTypes';\n\nconst INITIAL_STATE = {\n  name: '',\n  assertions: 0,\n  score: 0,\n  gravatarEmail: '',\n};\n\nconst player = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case SEND_USER_INFO:\n    return {\n      ...state,\n      name: action.payload.name,\n      gravatarEmail: action.payload.gravatarEmail,\n    };\n  case SEND_USER_GAME_INFO:\n    return {\n      ...state,\n      score: action.payload.score,\n      assertions: action.payload.assertions,\n    };\n  case RESET_USER_POINTS:\n    return INITIAL_STATE;\n  default:\n    return state;\n  }\n};\n\nexport default player;\n","import { combineReducers } from 'redux';\nimport player from './playerReducer';\n\nconst rootReducer = combineReducers({ player });\n\nexport default rootReducer;\n","import { applyMiddleware, legacy_createStore as createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers/rootReducer';\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\n\nif (window.Cypress) {\n  window.store = store;\n}\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport store from './redux/store/store';\nimport './index.scss';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}